{"name": "编辑文章分类，输入数字，编辑成功", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home", "trace": "self = <selenium.webdriver.chrome.service.Service object at 0x000002215391E7B8>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n>                                           stdout=self.log_file, stderr=self.log_file)\n\nD:\\Anaconda36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:64: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x000002215391E0B8>\nargs = ['chromedriver', '--port=50932'], bufsize = -1, executable = None\nstdin = None, stdout = -1, stderr = -1, preexec_fn = None, close_fds = False\nshell = False, cwd = None\nenv = environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'ANDROID_HOME': 'D:\\\\App_autotest\\\\Android_SDK', 'APPDATA': 'C:\\\\Users\\...6\\\\u8f91\\\\u6587\\\\u7ae0\\\\u5206\\\\u7c7b\\\\uff0c\\\\u8f93\\\\u5165\\\\u6570\\\\u5b57\\\\uff0c\\\\u7f16\\\\u8f91\\\\u6210\\\\u529f1] (setup)'})\nuniversal_newlines = False, startupinfo = None, creationflags = 0\nrestore_signals = True, start_new_session = False, pass_fds = ()\n\n    def __init__(self, args, bufsize=-1, executable=None,\n                 stdin=None, stdout=None, stderr=None,\n                 preexec_fn=None, close_fds=_PLATFORM_DEFAULT_CLOSE_FDS,\n                 shell=False, cwd=None, env=None, universal_newlines=False,\n                 startupinfo=None, creationflags=0,\n                 restore_signals=True, start_new_session=False,\n                 pass_fds=(), *, encoding=None, errors=None):\n        \"\"\"Create new Popen instance.\"\"\"\n        _cleanup()\n        # Held while anything is calling waitpid before returncode has been\n        # updated to prevent clobbering returncode if wait() or poll() are\n        # called from multiple threads at once.  After acquiring the lock,\n        # code must re-check self.returncode to see if another thread just\n        # finished a waitpid() call.\n        self._waitpid_lock = threading.Lock()\n    \n        self._input = None\n        self._communication_started = False\n        if bufsize is None:\n            bufsize = -1  # Restore default\n        if not isinstance(bufsize, int):\n            raise TypeError(\"bufsize must be an integer\")\n    \n        if _mswindows:\n            if preexec_fn is not None:\n                raise ValueError(\"preexec_fn is not supported on Windows \"\n                                 \"platforms\")\n            any_stdio_set = (stdin is not None or stdout is not None or\n                             stderr is not None)\n            if close_fds is _PLATFORM_DEFAULT_CLOSE_FDS:\n                if any_stdio_set:\n                    close_fds = False\n                else:\n                    close_fds = True\n            elif close_fds and any_stdio_set:\n                raise ValueError(\n                        \"close_fds is not supported on Windows platforms\"\n                        \" if you redirect stdin/stdout/stderr\")\n        else:\n            # POSIX\n            if close_fds is _PLATFORM_DEFAULT_CLOSE_FDS:\n                close_fds = True\n            if pass_fds and not close_fds:\n                warnings.warn(\"pass_fds overriding close_fds.\", RuntimeWarning)\n                close_fds = True\n            if startupinfo is not None:\n                raise ValueError(\"startupinfo is only supported on Windows \"\n                                 \"platforms\")\n            if creationflags != 0:\n                raise ValueError(\"creationflags is only supported on Windows \"\n                                 \"platforms\")\n    \n        self.args = args\n        self.stdin = None\n        self.stdout = None\n        self.stderr = None\n        self.pid = None\n        self.returncode = None\n        self.universal_newlines = universal_newlines\n        self.encoding = encoding\n        self.errors = errors\n    \n        # Input and output objects. The general principle is like\n        # this:\n        #\n        # Parent                   Child\n        # ------                   -----\n        # p2cwrite   ---stdin--->  p2cread\n        # c2pread    <--stdout---  c2pwrite\n        # errread    <--stderr---  errwrite\n        #\n        # On POSIX, the child objects are file descriptors.  On\n        # Windows, these are Windows file handles.  The parent objects\n        # are file descriptors on both platforms.  The parent objects\n        # are -1 when not using PIPEs. The child objects are -1\n        # when not redirecting.\n    \n        (p2cread, p2cwrite,\n         c2pread, c2pwrite,\n         errread, errwrite) = self._get_handles(stdin, stdout, stderr)\n    \n        # We wrap OS handles *before* launching the child, otherwise a\n        # quickly terminating child could make our fds unwrappable\n        # (see #8458).\n    \n        if _mswindows:\n            if p2cwrite != -1:\n                p2cwrite = msvcrt.open_osfhandle(p2cwrite.Detach(), 0)\n            if c2pread != -1:\n                c2pread = msvcrt.open_osfhandle(c2pread.Detach(), 0)\n            if errread != -1:\n                errread = msvcrt.open_osfhandle(errread.Detach(), 0)\n    \n        text_mode = encoding or errors or universal_newlines\n    \n        self._closed_child_pipe_fds = False\n    \n        try:\n            if p2cwrite != -1:\n                self.stdin = io.open(p2cwrite, 'wb', bufsize)\n                if text_mode:\n                    self.stdin = io.TextIOWrapper(self.stdin, write_through=True,\n                            line_buffering=(bufsize == 1),\n                            encoding=encoding, errors=errors)\n            if c2pread != -1:\n                self.stdout = io.open(c2pread, 'rb', bufsize)\n                if text_mode:\n                    self.stdout = io.TextIOWrapper(self.stdout,\n                            encoding=encoding, errors=errors)\n            if errread != -1:\n                self.stderr = io.open(errread, 'rb', bufsize)\n                if text_mode:\n                    self.stderr = io.TextIOWrapper(self.stderr,\n                            encoding=encoding, errors=errors)\n    \n            self._execute_child(args, executable, preexec_fn, close_fds,\n                                pass_fds, cwd, env,\n                                startupinfo, creationflags, shell,\n                                p2cread, p2cwrite,\n                                c2pread, c2pwrite,\n                                errread, errwrite,\n>                               restore_signals, start_new_session)\n\nD:\\Anaconda36\\lib\\subprocess.py:709: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <subprocess.Popen object at 0x000002215391E0B8>\nargs = 'chromedriver --port=50932', executable = None, preexec_fn = None\nclose_fds = False, pass_fds = (), cwd = None\nenv = environ({'ALLUSERSPROFILE': 'C:\\\\ProgramData', 'ANDROID_HOME': 'D:\\\\App_autotest\\\\Android_SDK', 'APPDATA': 'C:\\\\Users\\...6\\\\u8f91\\\\u6587\\\\u7ae0\\\\u5206\\\\u7c7b\\\\uff0c\\\\u8f93\\\\u5165\\\\u6570\\\\u5b57\\\\uff0c\\\\u7f16\\\\u8f91\\\\u6210\\\\u529f1] (setup)'})\nstartupinfo = <subprocess.STARTUPINFO object at 0x000002215391E358>\ncreationflags = 0, shell = False, p2cread = Handle(500), p2cwrite = -1\nc2pread = 4, c2pwrite = Handle(992), errread = 5, errwrite = Handle(1008)\nunused_restore_signals = True, unused_start_new_session = False\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals, unused_start_new_session):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if not isinstance(args, str):\n            args = list2cmdline(args)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        if -1 not in (p2cread, c2pwrite, errwrite):\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        # Start the process\n        try:\n            hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     os.fspath(cwd) if cwd is not None else None,\n>                                    startupinfo)\nE                                    FileNotFoundError: [WinError 2] 系统找不到指定的文件。\n\nD:\\Anaconda36\\lib\\subprocess.py:997: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\ntp = <class 'selenium.common.exceptions.WebDriverException'>, value = None\ntb = None\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\n\nD:\\Anaconda36\\lib\\site-packages\\six.py:692: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:13: in driver\n    _driver = webdriver.Chrome()\nD:\\Anaconda36\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:62: in __init__\n    self.service.start()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.service.Service object at 0x000002215391E7B8>\n\n    def start(self):\n        \"\"\"\n        Starts the Service.\n    \n        :Exceptions:\n         - WebDriverException : Raised either when it can't start the service\n           or when it can't connect to the service\n        \"\"\"\n        try:\n            cmd = [self.path]\n            cmd.extend(self.command_line_args())\n            self.process = subprocess.Popen(cmd, env=self.env,\n                                            close_fds=platform.system() != 'Windows',\n                                            stdout=self.log_file, stderr=self.log_file)\n        except TypeError:\n            raise\n        except OSError as err:\n            if err.errno == errno.ENOENT:\n                raise WebDriverException(\n                    \"'%s' executable needs to be in PATH. %s\" % (\n>                       os.path.basename(self.path), self.start_error_message)\nE                       selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home\n\nD:\\Anaconda36\\lib\\site-packages\\selenium\\webdriver\\common\\service.py:71: WebDriverException"}, "description": "用例描述：\n        1\t点文章分类导航标签 跳转列表页面\n        2   点编辑 文章分类按钮，跳转到编辑页面\n        3\t编辑页面输入，分类名称，如:文学，test, 123456 可以输入\n        4\t点保存按钮 保存成功，在列表页显示分类名称：文学\n    ", "parameters": [{"name": "input_text", "value": "'1234'"}, {"name": "expected", "value": "True"}, {"name": "title", "value": "'编辑文章分类，输入数字，编辑成功'"}], "start": 1593699554896, "stop": 1593699554896, "uuid": "d4a5ba4b-b6b5-477c-9bbd-562dec53f720", "historyId": "5cef88207e05d8cf2daa86bfcbdb110c", "testCaseId": "1469c707d00b124515a411c22aa25b35", "fullName": "case.test_add_canshuhua#test_add_article_1", "labels": [{"name": "story", "value": "用例：编辑文章分类-成功"}, {"name": "parentSuite", "value": "case"}, {"name": "suite", "value": "test_add_canshuhua"}, {"name": "host", "value": "DESKTOP-U8FBMV2"}, {"name": "thread", "value": "9304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "case.test_add_canshuhua"}], "links": [{"type": "test_case", "url": "http://49.235.92.12:8080/zentao/testcase-view-6-2.html", "name": "http://49.235.92.12:8080/zentao/testcase-view-6-2.html"}]}